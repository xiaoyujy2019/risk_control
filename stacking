import numpy as np
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from mlxtend.classifier import StackingCVClassifier
from sklearn.linear_model import LinearRegression
import lightgbm as lgb
import xgboost as xgb
import warnings
warnings.filterwarnings('ignore')

train_data = pd.read_csv('C:\\Users\\Lenovo\\Desktop\\handled\\newtrain.csv').values
test_data = pd.read_csv('C:\\Users\\Lenovo\\Desktop\\handled\\newtest.csv').values
target  = pd.read_csv('E:\\train_target.csv')
target=target['target'].values
#x_train,x_test,y_train,y_test=train_test_split(train_data,target)

#基模型
xg1= xgb.XGBClassifier(learning_rate=0.11, max_depth=3)
xg2= xgb.XGBClassifier(learning_rate=0.12, max_depth=3)
xg3= xgb.XGBClassifier(learning_rate=0.13, max_depth=3)
etc = ExtraTreesClassifier(max_features = 'log2', n_estimators = 1000 , n_jobs = -1)
rf1=RandomForestClassifier(min_samples_leaf=4,min_samples_split=10,max_depth=4,random_state=30,n_estimators=180,max_features='sqrt' ,oob_score=True)
rf2=RandomForestClassifier(n_estimators=120, max_depth=3,random_state=20)
gbc=GradientBoostingClassifier(learning_rate = 0.02, max_features = 0.7, n_estimators = 100 , max_depth = 5)
lr=LinearRegression()
lg=lgb.LGBMClassifier(boosting_type='gbdt',  min_data_in_leaf=5, max_bin=200, num_leaves=25, learning_rate=0.01)

print ("---------------------------------------------------------------------------------------)")
print ("开始构建Stacking：(cv=7,classifiers=[xg1,xg2,xg3,rf1,rf2,lg],meta_classifier=lr,use_probas=True)")
sclf=StackingCVClassifier(cv=7,classifiers=[xg1,xg2,xg3,rf1,rf2,lg],meta_classifier=lr,use_probas=True)
model=sclf.fit(train_data,target)
print ("---------------------------------------------------------------------------------------)")
print ("开始预测:")
result=model.predict(test_data)
print(result)
print ("---------------------------------------------------------------------------------------)")
print ("保存结果:")
id = list(range(132030,155591))
d ={ "id" : id, "target" : result }
res = pd.DataFrame(d)
print (">>>>", res)
res.to_csv('E:\\result\\5Kstacing0129.csv' )


